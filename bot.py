import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN
from weather import get_weather, get_weather_by_coords, get_weather_forecast
from notifications import send_weather_notifications
from database.users import add_user, update_user_city, update_user_notification_time, delete_user_notifications
from keyboards import get_start_keyboard, get_back_keyboard, get_weather_keyboard

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class Status(StatesGroup):
    waiting_for_city = State()
    waiting_for_time = State()
    waiting_moment_city = State()
    waiting_manual_city = State()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await add_user(                          
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await message.answer ("""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å –∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥ ‚Äî –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.

üìç –û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏
üèô –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

üîî –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞.
‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –µ—ë ‚Äî —Ç–æ–∂–µ –ª–µ–≥–∫–æ.

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
""",
        reply_markup=get_start_keyboard()
    )
    await state.set_state(Status.waiting_moment_city)


@dp.callback_query(F.data == "about_bot")
async def process_about_callback(callback: CallbackQuery):
    about_text = ("""
üå§ –ü–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç
–£–∑–Ω–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!

üìç –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
üìä –£–¥–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –æ—Å–∞–¥–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ‚Äî –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –≤—Å—ë —Å–∞–º!

üõ† –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:
/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üèô –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ ‚Äî –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
‚ùå –£–¥–∞–ª–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –æ—Ç–∫–ª—é—á–∏ —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç    
    """)
    
    await callback.message.edit_text(about_text, reply_markup=get_back_keyboard())
    await callback.answer()


@dp.callback_query(F.data == "back_to_start")
async def process_back_callback(callback: CallbackQuery):
    start_text = ("""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å –∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥ ‚Äî –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.

üìç –û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏
üèô –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

üîî –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞.
‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –µ—ë ‚Äî —Ç–æ–∂–µ –ª–µ–≥–∫–æ.

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
""")
    
    await callback.message.edit_text(start_text, reply_markup=get_start_keyboard())
    await callback.answer()


@dp.message(
    StateFilter(Status.waiting_moment_city),
    F.text == 'üèô –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥'
)
async def setting_manual_city(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
    await state.clear()                            #Switch to next step handler
    await state.set_state(Status.waiting_manual_city)


@dp.message(
    StateFilter(Status.waiting_manual_city))
async def process_manual_city(message: Message, state: FSMContext):
    city = message.text.strip()

    try:                                       
        weather_data = await get_weather(city)
        await message.answer(weather_data, reply_markup=get_weather_keyboard(city))
        await state.clear()
        await state.set_state(Status.waiting_moment_city)

    except Exception as e:
        await message.answer(f"üö´ –ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        await state.clear()
        await state.set_state(Status.waiting_moment_city)


@dp.message(
    F.content_type == 'location',
    StateFilter(Status.waiting_moment_city)
)
async def handle_location(message: Message, state: FSMContext):
    lat = message.location.latitude        
    lon = message.location.longitude      

    try:
        weather_text = await get_weather_by_coords(lat, lon)
        await message.answer(weather_text, reply_markup=get_weather_keyboard("–≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ"))
        await state.clear()
        await state.set_state(Status.waiting_moment_city)
    except Exception as e:
        await message.answer("üò¢ –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏")
        await state.clear()
        await state.set_state(Status.waiting_moment_city)


@dp.message(F.text == 'üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
async def cmd_setup(message: Message, state: FSMContext):
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ. –í –∫–∞–∫–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?"
    )
    await state.clear()
    await state.set_state(Status.waiting_for_city)


@dp.message(StateFilter(Status.waiting_for_city))
async def process_city(message: Message, state: FSMContext):
    city = message.text
    try:
        await get_weather(city)                    
        await state.update_data(city=city)        
        await update_user_city(                   
            message.from_user.id, city
        )

        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ä–æ–¥ {city} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)"
        )
        await state.set_state(Status.waiting_for_time)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ {city}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message(StateFilter(Status.waiting_for_time))
async def process_time(message: Message, state: FSMContext):
    time_text = message.text
    if not re.match(r'^([01]\d|2[0-3]):([0-5]\d)$', time_text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)")
        return

    data = await state.get_data()                 
    city = data.get('city')
    await update_user_notification_time(message.from_user.id, time_text)
    await message.answer(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_text}.\n\n",
        reply_markup=get_start_keyboard())
    await state.clear()
    await state.set_state(Status.waiting_moment_city)


@dp.message(F.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
async def cmd_delete_notifications(message: Message, state: FSMContext):
    try:                                        
        await delete_user_notifications(message.from_user.id)
        await message.answer(
            "–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n",
            reply_markup=get_start_keyboard()
        )
        await state.clear()
        await state.set_state(Status.waiting_moment_city)
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup = get_start_keyboard())
        await state.clear()
        await state.set_state(Status.waiting_moment_city)


@dp.callback_query(F.data.startswith("forecast_"))
async def process_forecast_callback(callback: CallbackQuery):
    city = callback.data.replace("forecast_", "")
    try:
        forecast_text = await get_weather_forecast(city)
        await callback.message.edit_text(forecast_text, reply_markup=get_back_keyboard())
        await callback.answer()
    except Exception as e:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã", show_alert=True)


async def setup():
    asyncio.create_task(send_weather_notifications(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(setup())